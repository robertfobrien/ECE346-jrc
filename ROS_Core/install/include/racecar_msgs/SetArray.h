// Generated by gencpp from file racecar_msgs/SetArray.msg
// DO NOT EDIT!


#ifndef RACECAR_MSGS_MESSAGE_SETARRAY_H
#define RACECAR_MSGS_MESSAGE_SETARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace racecar_msgs
{
template <class ContainerAllocator>
struct SetArray_
{
  typedef SetArray_<ContainerAllocator> Type;

  SetArray_()
    : set_list()  {
    }
  SetArray_(const ContainerAllocator& _alloc)
    : set_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Polygon_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Polygon_<ContainerAllocator> >> _set_list_type;
  _set_list_type set_list;





  typedef boost::shared_ptr< ::racecar_msgs::SetArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::racecar_msgs::SetArray_<ContainerAllocator> const> ConstPtr;

}; // struct SetArray_

typedef ::racecar_msgs::SetArray_<std::allocator<void> > SetArray;

typedef boost::shared_ptr< ::racecar_msgs::SetArray > SetArrayPtr;
typedef boost::shared_ptr< ::racecar_msgs::SetArray const> SetArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::racecar_msgs::SetArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::racecar_msgs::SetArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::racecar_msgs::SetArray_<ContainerAllocator1> & lhs, const ::racecar_msgs::SetArray_<ContainerAllocator2> & rhs)
{
  return lhs.set_list == rhs.set_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::racecar_msgs::SetArray_<ContainerAllocator1> & lhs, const ::racecar_msgs::SetArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace racecar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::racecar_msgs::SetArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::racecar_msgs::SetArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::racecar_msgs::SetArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::racecar_msgs::SetArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::racecar_msgs::SetArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::racecar_msgs::SetArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::racecar_msgs::SetArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77d2e907d44e8d702f6689ff05db06d9";
  }

  static const char* value(const ::racecar_msgs::SetArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77d2e907d44e8d70ULL;
  static const uint64_t static_value2 = 0x2f6689ff05db06d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::racecar_msgs::SetArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "racecar_msgs/SetArray";
  }

  static const char* value(const ::racecar_msgs::SetArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::racecar_msgs::SetArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Polygon[] set_list\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::racecar_msgs::SetArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::racecar_msgs::SetArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::racecar_msgs::SetArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::racecar_msgs::SetArray_<ContainerAllocator>& v)
  {
    s << indent << "set_list[]" << std::endl;
    for (size_t i = 0; i < v.set_list.size(); ++i)
    {
      s << indent << "  set_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.set_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RACECAR_MSGS_MESSAGE_SETARRAY_H
